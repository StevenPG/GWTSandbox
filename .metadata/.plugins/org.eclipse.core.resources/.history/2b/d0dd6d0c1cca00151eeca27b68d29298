package stevengantz.memory;

/**
 * @author: Steven Gantz 
 * @Date: 2/1/2016 
 * Created for CSC421, Dr. Spiegel 
 * Project Due: 
 * This file is a container
 * representing a card in memory that
 * is used to play a card game called Memory.
 **/
public class MemoryCard {

	/**
	 * This attribute contains the symbol that would show on the front of a
	 * memory card.
	 **/
	private String cardFront;

	/**
	 * This attribute contains the symbol that would show on the back of a
	 * memory card.
	 **/
	private String cardBack;

	/**
	 * This value denotes whether the cards current state is upward or downward
	 * facing. true - Upward facing false - Downward facing
	 **/
	private boolean faceUp;

	/**
	 * General purpose constructor, builds a regular card object.
	 **/
	public MemoryCard(String cardFront, String cardBack, boolean faceUp) {
		this.cardFront = cardFront;
		this.cardBack = cardBack;
		this.faceUp = faceUp;
	}

	/**
	 * This method takes a memory card and will return a new card.
	 **/
	public MemoryCard copyCard() {
		return new MemoryCard(this.cardFront, this.cardBack, this.faceUp);
	}

	/**
	 * This overridden method allows for memory cards to be directly compared to
	 * each other for equality, which lends itself to the game perfectly.
	 **/
	public boolean equals(MemoryCard mem) {
		// Make sure the types are even correct
		if (!(mem instanceof MemoryCard)) {
			return false;
		}

		// Get two local copies of the cards
		MemoryCard card1 = this.copyCard();
		MemoryCard card2 = mem.copyCard();

		// Check the front symbol of both cards
		return card1.getFrontSymbol() == card2.getFrontSymbol();
	}

	/**
	 * This method returns the front facing symbol
	 **/
	public String getFrontSymbol() {
		return this.cardFront;
	}

	/**
	 * This method returns the rear facing symbol
	 */
	public String getBackSymbol() {
		return this.cardBack;
	}

	/**
	 * This method returns true if the card is face up, and false if it is
	 * facing down.
	 **/
	public boolean isFaceUp() {
		return this.faceUp;
	}

	/**
	 * This method "flips" the card over
	 **/
	public void flip() {
		// If faceUp is true, set to false
		this.faceUp = (faceUp) ? false : true;
	}

	/**
	 * This method overrides the standard toString method and returns the object
	 * in a string format for debugging.
	 **/
	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("[" + this.cardFront + "] [" + this.cardBack + "]");
		return builder.toString();
	}
}